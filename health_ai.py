# -*- coding: utf-8 -*-
"""Health AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DRfUxG9DE8dQxw0YW3DhF_EOJEd71ai_
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# üé® Custom CSS for colors, gradients, and glow
custom_css = """
body {
    background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
    color: #ffffff;
    font-family: 'Segoe UI', sans-serif;
}

.gr-button {
    background: linear-gradient(90deg, #ff416c, #ff4b2b);
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: bold;
    box-shadow: 0px 0px 15px rgba(255, 64, 108, 0.8);
    transition: transform 0.2s, box-shadow 0.2s;
}
.gr-button:hover {
    transform: scale(1.05);
    box-shadow: 0px 0px 25px rgba(255, 64, 108, 1);
}

.gr-textbox {
    background: #ffffff10;
    border: 1px solid #00adb5;
    border-radius: 10px;
    color: #ffffff;
    padding: 10px;
}
"""

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor.\n\nSymptoms: {symptoms}\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for:\nCondition: {condition}\nAge: {age}\nGender: {gender}\nHistory: {medical_history}\n\nPlan:"
    return generate_response(prompt, max_length=1200)

# üåü Gradio App with Custom Colors
with gr.Blocks(css=custom_css) as app:
    gr.Markdown("<h1 style='text-align:center; color:#00adb5;'>üåü Medical AI Assistant üåü</h1>")
    gr.Markdown("<p style='color:#ffdd59; text-align:center;'>‚ö†Ô∏è Disclaimer: Informational purposes only. Consult healthcare professionals for medical advice. ‚ö†Ô∏è</p>")

    with gr.Tabs():
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("üîç Analyze Symptoms")
                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)
            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(label="Medical Condition", placeholder="e.g., diabetes, migraine...", lines=2)
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(choices=["Male", "Female", "Other"], label="Gender", value="Male")
                    history_input = gr.Textbox(label="Medical History", placeholder="Previous conditions, allergies, medications...", lines=3)
                    plan_btn = gr.Button("üíä Generate Treatment Plan")
                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)
            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

app.launch(share=True)